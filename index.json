[{"content":"Introduction Recently, I used Streamlit to create a chatbot for an application. The use of components makes it really efficient to create simple applications, but I felt like whenever I wanted to customise more things got complicated. When using the st-chat component, I could not add quick reply buttons or a image-carousel to the bot\u0026rsquo;s replies.\nSo instead, I created a similar chatbot using Flask. I looked around to see if i could find some code for a chatbot UI in flask and I found this project by binary-hood. I forked it and made the changes I wanted to add:\nLight/dark mode toogle Quick reply buttons Feautures Light/Dark mode This feaure wasn\u0026rsquo;t present in the original project. Here are some screenshots:\nQuick reply buttons When sending the result to the frontend, you can add a array of strings called quick_replies. In the frontend, this will create the respective buttons. If you add a \u0026ldquo;!\u0026rdquo; at the begging of the string, then the button will be a diffent color. This is useful if, for example, you want to have a \u0026ldquo;cancel\u0026rdquo; button.\n@app.route(\u0026#34;/get\u0026#34;, methods=[\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;]) def chat(): input = request.form[\u0026#34;msg\u0026#34;] result = gpt.get_gpt_answer(input) print(result) quick_replies = [\u0026#34;Hello World\u0026#34;, \u0026#34;!Goodbye\u0026#34;] return {\u0026#34;result\u0026#34;: result, \u0026#34;quick_replies\u0026#34;: quick_replies} Here is what it looks like: You get the full code for this project here. Feel free to fork it and add even more feautures.\n","permalink":"https://jpssoares.github.io/posts/flask-chatbot-with-extra-feautures/","summary":"Introduction Recently, I used Streamlit to create a chatbot for an application. The use of components makes it really efficient to create simple applications, but I felt like whenever I wanted to customise more things got complicated. When using the st-chat component, I could not add quick reply buttons or a image-carousel to the bot\u0026rsquo;s replies.\nSo instead, I created a similar chatbot using Flask. I looked around to see if i could find some code for a chatbot UI in flask and I found this project by binary-hood.","title":"Flask Chatbot With Extra Feautures"},{"content":"Introduction The use of LLMs in the creation of chatbots is old news. However, there are more use for LLMs than text generation in the context of the development of conversational agents. One of the main challenges of creating a conversational agent is text classification for intent detection. With the use of models, such as OpenAi\u0026rsquo;s GPT3.5 or Google\u0026rsquo;s Palm2, this task becomes trivial.\nConversational agent framework The difference between a chatbot(e.g. ChatGPT) and a conversational agent(e.g. Siri or Alexa) is a chatbot uses a text generation model to create a conversation with the user, while a conversational agent has a series of functions it can call and it tries to understand what the user wants to accomplish.\nFor example, I might say \u0026ldquo;Siri, play Peaches by Justin Bieber\u0026rdquo;, and my phone will know that it need to call a function that open the Spotify app and play the first result for the given query(\u0026ldquo;Peaches\u0026rdquo; by Justin Bieber).\nChatbots (Task-based) Dialog Agents • mimic informal human chatting • for fun, or even for therapy • interfaces to personal assistants • cars, robots, appliances • booking flights or restaurants • actionable A conventional conversational agent is composed of three main parts: NLU, NLG and DM.\nNatural Language Understanding: parses the user\u0026rsquo;s utterance and extracts using machine learning.\nDialogue Manager: controls the flow of the conversation.\nNatural Language Generation: produce more natural, less templated utterances\nKnowledge-Base: information or products that feed the conversation.\nWhat is intent detection? Why should we use it? Intent detection is the process of using a text classification model in order to classify the act that the user wishes the assistant to accomplish. This is an important feauture to implement in a conversational agent, because there are many ways a user can ask to perform the same task:\nCould you kindly play \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber, please? I\u0026rsquo;d really appreciate it if you could put on \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber. Would you mind playing \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber for me? I\u0026rsquo;d love to hear \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber. Could you play it, please? If it\u0026rsquo;s possible, could you play Justin Bieber\u0026rsquo;s \u0026ldquo;Peaches\u0026rdquo; for me? I\u0026rsquo;m really in the mood for \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber. Could you play it, please? Would you be so kind as to play \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber? Can you add \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber to the playlist, please? I\u0026rsquo;d be grateful if you could play Justin Bieber\u0026rsquo;s song \u0026ldquo;Peaches.\u0026rdquo; If it\u0026rsquo;s not too much trouble, could you play \u0026ldquo;Peaches\u0026rdquo; by Justin Bieber? If we simply program our agent to call the function if the user input is \u0026ldquo;Play Peaches by Justin Bieber\u0026rdquo;, the accuracy of our software will be terrible. Therefore we need to use AI to analyse the users input and understand the act.\nWe could use HuggingFace and a text classification model such as distilbert-base-uncased-finetuned-sst-2-english, but eventhough this model is already pre-trained, we would still need to fine-tune it for classifying intent for our specific application. This process requires a lot of data(usually, the more the better). But what do we do if we are creating a small research project or our boss did not give us enough time to collect data from our users. In that case, using a LLM trained on trillions of parameters can provide us with predictions that are better than a model like BERT.\nHow to create the right prompt To create the ideal prompt, we first create a list of possible intents. These can be very different depending on what kind of app we wish to build. For example, if we want to buid a dialog agent for a clothing shop, we could have a list of intents like:\nuser_get_product user_get_product_info user_get_product_reviews user_get_product_brand user_get_product_size We should also add some general purpose intents, which will help improve user experience.\nuser_neutral_greeting user_neutral_goodbye user_neutral_tell_me_a_joke user_neutral_meaning_of_life user_neutral_out_of_scope The \u0026ldquo;out_of_scope\u0026rdquo; intent is very important, since it\u0026rsquo;s used to catch any request from the user that make sense in the context of the application.\nClothing store example An example of a prompt for a intent detector for a clothing shop would be:\nI am building an intent detector for a chatbot. Here are the possible options for the intent: user_neutral_greeting user_neutral_goodbye user_neutral_tell_me_a_joke user_neutral_meaning_of_life user_neutral_out_of_scope user_search_product user_get_product_info user_get_product_reviews user_get_product_brand user_get_product_size What would be the right intent for this input: “{prompt}” Please only return the intent and nothing else. Make your answer as short as possible. If we test this using ChatGPT, we can already get some pretty good results.\nConclusion You should try to change the prompt in small ways and test the accuracy of different LLMs in your application. Also you can keep adding different intents as you add more functionalities to your app.\n","permalink":"https://jpssoares.github.io/posts/conversational_agent_intent_detector/","summary":"Introduction The use of LLMs in the creation of chatbots is old news. However, there are more use for LLMs than text generation in the context of the development of conversational agents. One of the main challenges of creating a conversational agent is text classification for intent detection. With the use of models, such as OpenAi\u0026rsquo;s GPT3.5 or Google\u0026rsquo;s Palm2, this task becomes trivial.\nConversational agent framework The difference between a chatbot(e.","title":"Using LLMs for Intent Detection"},{"content":" Name Description Pixelous Overlay OBS overlay created using Pygame that displays each follower/subsciber as a character on the bottom of the screen. Check out the code. Farfetch ChatBot Conversational agent built with ML models, such as Clip, Blip and GPT. Read the paper here. Check out the code. ","permalink":"https://jpssoares.github.io/projects/","summary":"projects","title":"Projects"}]